\section*{Instrucciones:}

La tarea se entrega y se resuelve en equipos de máximo 3 integrantes (1 a 3 personas). La tarea se entrega virtualmente en formato pdf tanto si son fotos de cuaderno, está realizada en word, en LATEX, etc.

No habrán reposiciones de tareas. Las tareas se pueden entregar con máximo 2 días de retraso para ser evaluadas sobre 8.

\textbf{Puntos Totales: 100}

\textbf{Tiempo estimado: $\approx$ 1hrs 30 mins}

\section*{Ejercicios}

\textbf{1. (15 min / 12.5 puntos)} De acuerdo a la clase y al siguiente video \url{https://youtu.be/iAqyufwYcHc?si=rRdjISdUndNSakb9} (también puedes consultar el libro principal en el capítulo 4) contesta de forma breve:

\begin{enumerate}
    \item[(a)] ¿En qué consiste la transformación de un registro seguro a un registro regular?

    Para transformar un registro seguro a uno regular, lo que debemos de hacer es añadir un registro adicional en donde el hilo que escribe guarda el valor viejo.\\
    
    \item[(b)] ¿Cuál es la diferencia entre un registro atómico y uno regular?

    La diferencia radica en que el brinco entre un registro regular a uno atómico es que el registro atómico también satisface que una lectura anterior no puede devolver un valor de retorno después de ser devuelto por una lectura posterior.\\
    
    \item[(c)] ¿Qué relación hay entre los registros atómicos y el algoritmo de Bakery (históricamente de acuerdo a Lamport)?

    A partir de la palabras de Lamport, podemos ver que en la descripción de su paper original donde abordaba el desglose del funcionamiento del algoritmo del panadero, que este necesitaba registros con propiedades cuando menos muy similares a lo que hoy conocemos como los registros atómicos, para operar correctamente.

    \hfill
\end{enumerate}

\hfill

\textbf{2. (30 min / 25 puntos)} Analiza la siguiente ejecución (Figura 1) con respecto a la implementación del \textit{Snapshot Wait-free} (código en Figura 2). La inicialización del Snapshot es $SS = [\perp,\perp,\perp,\perp]$, donde:

\begin{itemize}
    \item $SS[0] =$ registro de A,
    
    \item $SS[1] =$ registro de B,
    
    \item $SS[2] =$ registro de C,
    
    \item $SS[3] =$ registro de D.
    
\end{itemize}

Dados los siguientes valores de las vistas $V_d$ y $V_a$, ¿es posible que la ejecución sea una ejecución del \textit{Snapshot Wait-free}? Si tu respuesta es sí, argumenta por qué es linealizable con respecto a un objeto de tipo \textit{Snapshot atómico} (muestra una linearización).

\begin{center}
    \includegraphics[width = 10 cm]{Images/Pregunta2_4.png}
\end{center}

\hfill

\begin{enumerate}
    \item[(a)] Si $V_d = [\perp, v_2, v_4,\perp]$ y $V_a = [v_1, v_2, v_4,\perp]$.

        Esta  ejecución no es posible, esto se debe a que con base a la posición donde se encuentra nuestro $V_d$, al momento de reflejar esta vista siguiendo lo propuesto sería $V_d = [\perp, v_2, v_4,\perp]$, mientras que según nuestra historia de nuestros hilos para este punto, en el hilo A ya se cumplió la actualización de $v_1$, por lo cual no podemos armar una linearización que encaje con lo pedido.
    $\therefore$ No es linealizable.\\
    
    \item[(b)] Si $V_d = [v_1, v_2, v_4,\perp]$ y $V_a = [v_1, v_2, v_3,\perp]$.

    Esta ejecución tampoco es posible, ya que tomando de referencia a la posición donde se encuentra nuestro $V_a$, como para cuando tenemos nuestro $V_d$ este ya leyó a $v_4$; para mantener nuestra consistencia secuencial, este solamente puede leer los mismos registros o posteriores a este, por lo cual, este no puede leer a $v_3$ ya que es anterior a $v_4$ en la historia mostrada.

    $\therefore$ No es linealizable.\\
    
    \item[(c)] Si $V_d = [v_1, v_2, v_3,\perp]$ y $V_a = [v_1, v_2, v_4,\perp]$.

    Para probar que esta es una ejecución \textit{Snapshot Wait-free}, debemos de probar que existe una linearización creíble a partir del modelo planteado, recordando que en caso de que haya eventos que se traslapen, los podemos ordenar de la manera que más nos convenga con el fin de expresar la linearización, tenemos lo siguiente:

    A.update($v_1$)

    B.update($v_2$)

    C.update($v_3$)

    B.scan($V_d$)

    C.update($v_4$)

    A.scan($V_a$)

    Como existe una linearización, podemos concluir que si cumple con ser una ejecución de un \textit{Snapshot Wait-free}.

    \hfill
    
\end{enumerate}

\hfill

\textbf{3. (20 min / 25 puntos)} Plantea una ejecución del \textit{Snapshot Wait-free} (código en Figura 2) para $n = 4$ hilos en donde muestres un ejemplo de por qué esta implementación es \textbf{bounded wait-free}. Es decir, que cada $\texttt{update()}$ o $\texttt{scan()}$ termina en a lo más $O(n^2)$ lecturas o escrituras (pasos).
\textit{\textbf{Hint:} Muestra uno de los peores escenarios en donde 4 llamadas $\texttt{update()}$ se traslapan.}

\begin{center}
    \includegraphics[height = 13.5 cm]{Images/Pregunta3_4.png}
\end{center}

Sabemos que, por la definición de bounded wait-free, lo que se debe de probar es que está topado a $O(n^2)$ lecturas o escrituras (pasos) como máximo cada update().

Analizando el peor caso, observando la ejecución de este, supongamos que tenemos nuestros 4 hilos $\{0,1,2,3\}$:

Comenzando con que Los 4 hilos ejecutan update() simultáneamente, cada uno llama a scan(), analizando las operaciones implicadas en este paso:

\begin{itemize}

    \item $O(n)$ operaciones en el collect() inicial
    
    \item $O(n)$ operaciones en cada collect() dentro del bucle

    \item $O(n)$ comparaciones en cada iteración

\end{itemize}

    Por lo cual, tras en análisis inicial, podemos ver que la ejecucióndle proceso sin traslape es de complejidad lineal ($O(n)$)

Ahora bien, notemos que el peor caso o caso crítico ocurre cuando para un hilo (supongamos SPG, que es el hilo 0):

1. El hilo 0 inicia update() y llama a scan()

2. Mientras scan() está en progreso, el hilo 1 completa un update()

3. Cuando scan() hace su primer collect() y luego el segundo, detecta que el hilo 1 ha cambiado

4. Luego el hilo 2 completa un update()

5. En la siguiente iteración, scan() detecta que el hilo 2 ha cambiado
Y así sucesivamente

Veamos que en el peor de los casos, para cada hilo lo que ocurre es que los otros hilos ya hayan concluido un update(), como sabemos que estamos trabajando con Snapshots atómicos por las propiedades de estos, sabemos que no puede devolver un valor de retorno después de ser devuelto por una lectura posterior, es decir, no pueden estar haciendo en bucles updates(), los otros hilos a lo más pueden completar 1 antes de que este termine el suyo.

Considerando los $n$ hilos, veamos que el máximo numero de updates que se pueden dar con la suma de Pascal ($\frac{n (n-1)}{2}$), que en nuestro caso son 6 para los cuatro hilos, y esto se realiza en tiempo cuadrático $O(n^2)$. 

Como no hubo operación que requiriera una complejidad superior a cuadrática en cuanto al número de operaciones, podemos considerar que $O(n^2)$ es el tope de pasos para cada update().

$\therefore$ El \textit{Snapshot Wait-free} cumple con ser bounded wait-free.\\

\hfill

\textbf{4. (20 min / 25 puntos)} Describe una ejecución del \textit{Snapshot Obstruction-Free} (código en Figura 3) en la cual el método $\texttt{scan()}$ de un hilo A nunca termina (considera $n = 3$ hilos).

\begin{center}
    \includegraphics[width = 12 cm]{Images/Pregunta4_4.png}
\end{center}

En la ejecución de Snapshot Obstruction-Free presentada, el método \texttt{scan()} de un hilo puede no finalizar si
otros hilos están constantemente realizando actualizaciones. Así es como pasaría:\\

\textbf{Hilos involucrados:}

\begin{itemize}
    \item \textbf{Hilo A}: Intenta ejecutar \texttt{scan()}.
    
    \item \textbf{Hilos B y C}: Ejecutan repetidamente \texttt{update()} en sus registros sin pausa.
\end{itemize}

\textbf{Ejecución:}
\begin{enumerate}
    \item \textbf{Hilo A} inicia el método \texttt{scan()} y realiza la primera \texttt{collect()}, guardando los valores en \texttt{oldCopy}.
    
    \item Antes de que \textbf{A} realice la segunda \texttt{collect()}, \textbf{B} o \textbf{C} completan un \texttt{update()}, incrementando su sello
    de tiempo (\texttt{stamp}) y cambiando su valor en \texttt{a\_table}.
    
    \item \textbf{Hilo A} realiza la segunda \texttt{collect()}, obteniendo \texttt{newCopy}. Debido a las actualizaciones recientes,
    \texttt{oldCopy} y \texttt{newCopy} difieren.
    
    \item Al detectar la diferencia, \textbf{A} actualiza \texttt{oldCopy} con \texttt{newCopy} y repite el bucle \texttt{while}.
    
    \item Este proceso se repite indefinidamente, ya que \textbf{B} y \textbf{C} continúan realizando actualizaciones que cambian
    el estado de \texttt{a\_table} entre las dos llamadas a \texttt{collect()} de \textbf{A}.
\end{enumerate}

\textbf{Resultado:}
\begin{itemize}
    \item El método \texttt{scan()} de \textbf{A} nunca termina porque siempre encuentra cambios entre las dos colecciones consecutivas, debido a la interferencia constante de \textbf{B} y \textbf{C}.
    
    \item El algoritmo es \textit{obstruction-free}, lo que significa que solo garantiza el progreso de un hilo si no hay interferencia de otros hilos.
\end{itemize}

\textbf{Por lo tanto:}
\begin{itemize}
    \item El hilo A nunca logra que \texttt{oldCopy} y \texttt{newCopy} sean iguales, por lo que el bucle \texttt{while (true)} nunca termina.
    
    \item Ocasionando que el método \texttt{scan()} de A nunca finalice.
\end{itemize}

\hfill

\textbf{5. (15 min / 12.5 puntos)} Si en la implementación del \textit{Snapshot Obstruction-free} modificamos el método $\texttt{scan()}$ de la siguiente manera:

\begin{center}
    \includegraphics[width = 12 cm]{Images/Pregunta51_4.png}
\end{center}

\begin{itemize}
    \item ¿Podría suceder la siguiente implementación de la Figura 5? Supón que inicialmente el arreglo está inicializado: $[\perp,\perp,\perp]$.

    \begin{center}
        \includegraphics[width = 8 cm]{Images/Pregunta5_4.png}
    \end{center}\\

Inicialmente el arreglo está en el estado $[\bot, \bot, \bot]$, entonces, la operación update(c) pasa primero, actualizando el valor correspondiente a la posición del hilo $A$. 
La operación scan() comienza en el hilo $B$ y toma una copia del estado usando el método collect(), después, pasa una operación update(a) en el hilo $C$. 
Posteriormente, sucede una operación update(b) en el hilo $C$ y por último, la operación scan() regresa el valor $V = [\bot, \bot, b]$.

Entonces, decimos que la implementación de la Figura 5 si podría suceder con la implementación modificada de scan(), la cual solo hace una llamada a collect(), porque esta implementación permite que el valor devuelto por scan() muestre un estado inconsistente si ocurren actualizaciones concurrentes durante la recolección de valores. Pero, notemos que el hecho de que la ejecución pueda ocurrir no implica que la implementación sea linealizable, de hecho, la implementación modificada no es linealizable porque regresa un estado que no corresponde a un punto único de la ejecución.

    \hfill
    
    \item ¿La implementación seguiría siendo linealizable? Argumenta por qué.

Notemos que en la implementación original del método scan() hace múltiples llamadas a collect() hasta que el estado obtenido sea consistente, esto nos garantiza que el valor que regreso scan() muestre un estado consistente de la memoria compartida en algún punto de su ejecución. La implementación modificada de scan() solo hace una única llamada a collect(), es decir, el valor devuelto muestra únicamente el estado en el instante en que se realizó esa única recolección. Además, la ejecución de la Figura 5 nos indica que el valor devuelto por scan() es $V = [\bot, \bot, b]$, es decir, el valor de la posición correspondiente al hilo $B$ fue actualizado después de la llamada a collect(), pero antes de que scan() regresara el resultado.

Tomando en cuenta los argumentos anteriores, decimos que la implementación modificada no es linealizable porque la operación scan() regresa un valor que no muestra un estado consistente de la memoria compartida en ningún punto único de su ejecución, recordemos que para que pueda ser linealizable es necesario que toda operación se muestre como si pasará en un punto único en el tiempo entre su inicio y su finalización, entonces, la implementación modificada no nos garantiza esto porque solo hace una única llamada a collect() y no valida la consistencia del estado obtenido.
Por lo tanto, concluimos que la implementación modificada de scan() no es linealizable.

    \hfill
    
\end{itemize}
